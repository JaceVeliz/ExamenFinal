
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Serie1_201700343;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_Sintactico2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_Sintactico2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_Sintactico2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_Sintactico2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\004\004\000\002\005\005" +
    "\000\002\005\002\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\014\012\011\013\010\014\004\015\005\016" +
    "\007\001\002\000\020\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\001\002\000\020\002\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\001\002" +
    "\000\006\002\ufffe\010\031\001\002\000\020\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\001\002" +
    "\000\020\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\001\002\000\020\002\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\001\002\000\004\002" +
    "\030\001\002\000\020\002\ufffb\004\016\005\017\006\014" +
    "\007\021\010\ufffb\011\020\001\002\000\014\012\011\013" +
    "\010\014\004\015\005\016\007\001\002\000\006\002\ufffd" +
    "\010\ufffd\001\002\000\014\012\011\013\010\014\004\015" +
    "\005\016\007\001\002\000\014\012\011\013\010\014\004" +
    "\015\005\016\007\001\002\000\014\012\011\013\010\014" +
    "\004\015\005\016\007\001\002\000\014\012\011\013\010" +
    "\014\004\015\005\016\007\001\002\000\020\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\001\002" +
    "\000\020\002\ufffb\004\016\005\017\006\014\007\021\010" +
    "\ufffb\011\020\001\002\000\006\002\ufffc\010\ufffc\001\002" +
    "\000\020\002\ufff9\004\ufff9\005\ufff9\006\014\007\021\010" +
    "\ufff9\011\ufff9\001\002\000\020\002\ufffa\004\ufffa\005\ufffa" +
    "\006\014\007\021\010\ufffa\011\ufffa\001\002\000\020\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\001\002\000\004\002\001\001\002\000\014\012\011\013" +
    "\010\014\004\015\005\016\007\001\002\000\004\002\000" +
    "\001\002\000\006\002\ufffe\010\031\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\010\002\011\004\005\006\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\014\001\001\000\004\006\026" +
    "\001\001\000\002\001\001\000\004\006\025\001\001\000" +
    "\004\006\024\001\001\000\004\006\022\001\001\000\004" +
    "\006\021\001\001\000\002\001\001\000\004\005\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\032\006" +
    "\012\001\001\000\002\001\001\000\004\003\033\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_Sintactico2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_Sintactico2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_Sintactico2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public String resultado;

public Operador raiz=new Operador();
public static LinkedList<ErrorLe> ObjErrorS=new LinkedList<ErrorLe>();

//Metodo que se llama automaticamente ante algun error sintactico
public void syntax_error(Symbol s)
{

       String lexema = s.value.toString();
       int fila = s.right;
       int columna = s.left;

       System.out.println("¡Error Sintactico encontrado! ");
       System.out.println("\t\tLexema: "+lexema);
       System.out.println("\t\tFila: "+fila);
       System.out.println("\t\tColumna: "+columna);
       
       ErrorLe errorsin = new ErrorLe(lexema,"Error Sintactico", fila, columna, "Caracter o simbolo no esperado");
       ObjErrorS.add(errorsin);
}

//Metodo que se llama en el momento en que ya no es posible una recuperacion de errores

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

       System.out.println("¡Error Sintactico encontrado! ");
       System.out.println("\t\tLexema: "+lexema);
       System.out.println("\t\tFila: "+fila);
       System.out.println("\t\tColumna: "+columna);
       
       ErrorLe errorsin = new ErrorLe(lexema,"Error Sintactico", fila, columna, "Caracter o simbolo no esperado");
       ObjErrorS.add(errorsin);

}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_Sintactico2$actions {




  private final A_Sintactico2 parser;

  /** Constructor */
  CUP$A_Sintactico2$actions(A_Sintactico2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico2$do_action_part00000000(
    int                        CUP$A_Sintactico2$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico2$parser,
    java.util.Stack            CUP$A_Sintactico2$stack,
    int                        CUP$A_Sintactico2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_Sintactico2$result;

      /* select the action based on the action number */
      switch (CUP$A_Sintactico2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).value;
		RESULT = start_val;
              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_Sintactico2$parser.done_parsing();
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Lista Inicio2 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		resultado=b+a;
              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio2 ::= puntoyc Lista Inicio2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		String ope=";"+a+b;
RESULT=ope;
              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio2 ::= 
            {
              String RESULT =null;

              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Inicio2",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista ::= Expresion Lista2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		String ope=a+b;
RESULT=ope;
              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Lista",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista2 ::= coma Expresion Lista2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		String ope=","+a+b;
RESULT=ope;
              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Lista2",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista2 ::= 
            {
              String RESULT =null;

              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Lista2",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expresion ::= Expresion mas Expresion 
            {
              String RESULT =null;
		int Ex1left = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).left;
		int Ex1right = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).right;
		String Ex1 = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).value;
		int Ex2left = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int Ex2right = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String Ex2 = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		String datos="";
if(Ex1!=null && Ex2!=null){
datos=Ex1+Ex2+"+";
}
RESULT=datos;


              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expresion ::= Expresion menos Expresion 
            {
              String RESULT =null;
		int Ex1left = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).left;
		int Ex1right = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).right;
		String Ex1 = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).value;
		int Ex2left = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int Ex2right = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String Ex2 = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		String datos="";
if(Ex1!=null && Ex2!=null){
datos=Ex1+Ex2+"-";
}
RESULT=datos;


              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expresion ::= Expresion por Expresion 
            {
              String RESULT =null;
		int Ex1left = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).left;
		int Ex1right = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).right;
		String Ex1 = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).value;
		int Ex2left = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int Ex2right = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String Ex2 = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		String datos="";
if(Ex1!=null && Ex2!=null){
datos=Ex1+Ex2+"*";
}
RESULT=datos;


              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expresion ::= Expresion div Expresion 
            {
              String RESULT =null;
		int Ex1left = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).left;
		int Ex1right = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).right;
		String Ex1 = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)).value;
		int Ex2left = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int Ex2right = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String Ex2 = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		String datos="";
if(Ex1!=null && Ex2!=null){
datos=Ex1+Ex2+"/";

}
RESULT=datos;

              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.elementAt(CUP$A_Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expresion ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		 String nuevo=a;
                        RESULT=nuevo;
              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expresion ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		 String nuevo1=a;
                        RESULT=nuevo1;
              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expresion ::= chara 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		 String nuevo2=a;
                        RESULT=nuevo2;
              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expresion ::= truee 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		String nuevo3=a;
                        RESULT=nuevo3;
              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expresion ::= falsee 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico2$stack.peek()).value;
		String nuevo4=a;
                        RESULT=nuevo4;
              CUP$A_Sintactico2$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico2$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_Sintactico2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico2$do_action(
    int                        CUP$A_Sintactico2$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico2$parser,
    java.util.Stack            CUP$A_Sintactico2$stack,
    int                        CUP$A_Sintactico2$top)
    throws java.lang.Exception
    {
              return CUP$A_Sintactico2$do_action_part00000000(
                               CUP$A_Sintactico2$act_num,
                               CUP$A_Sintactico2$parser,
                               CUP$A_Sintactico2$stack,
                               CUP$A_Sintactico2$top);
    }
}

}
