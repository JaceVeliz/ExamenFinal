
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1.examenfinal_201700343;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_Sintactico1 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_Sintactico1() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_Sintactico1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_Sintactico1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\005\000\002\002\004\000\002\002\003\000\002\004" +
    "\010\000\002\003\011\000\002\003\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\004\004\005\001\002\000\004\002\023\001" +
    "\002\000\004\007\007\001\002\000\004\002\000\001\002" +
    "\000\004\006\010\001\002\000\004\007\011\001\002\000" +
    "\004\005\012\001\002\000\006\002\ufffd\006\013\001\002" +
    "\000\004\004\015\001\002\000\004\002\uffff\001\002\000" +
    "\004\007\016\001\002\000\004\006\017\001\002\000\004" +
    "\007\020\001\002\000\004\005\021\001\002\000\006\002" +
    "\ufffd\006\013\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\006\002\003\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\021\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_Sintactico1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_Sintactico1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_Sintactico1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public Numeros raiz=new Numeros();

public static LinkedList<ErrorLe> ObjErrorS=new LinkedList<ErrorLe>();

//Metodo que se llama automaticamente ante algun error sintactico
public void syntax_error(Symbol s)
{

       String lexema = s.value.toString();
       int fila = s.right;
       int columna = s.left;

       System.out.println("¡Error Sintactico encontrado! ");
       System.out.println("\t\tLexema: "+lexema);
       System.out.println("\t\tFila: "+fila);
       System.out.println("\t\tColumna: "+columna);
       
       ErrorLe errorsin = new ErrorLe(lexema,"Error Sintactico", fila, columna, "Caracter o simbolo no esperado");
       ObjErrorS.add(errorsin);
}

//Metodo que se llama en el momento en que ya no es posible una recuperacion de errores

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

       System.out.println("¡Error Sintactico encontrado! ");
       System.out.println("\t\tLexema: "+lexema);
       System.out.println("\t\tFila: "+fila);
       System.out.println("\t\tColumna: "+columna);
       
       ErrorLe errorsin = new ErrorLe(lexema,"Error Sintactico", fila, columna, "Caracter o simbolo no esperado");
       ObjErrorS.add(errorsin);

}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_Sintactico1$actions {




  private final A_Sintactico1 parser;

  /** Constructor */
  CUP$A_Sintactico1$actions(A_Sintactico1 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico1$do_action_part00000000(
    int                        CUP$A_Sintactico1$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico1$parser,
    java.util.Stack            CUP$A_Sintactico1$stack,
    int                        CUP$A_Sintactico1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_Sintactico1$result;

      /* select the action based on the action number */
      switch (CUP$A_Sintactico1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-1)).value;
		RESULT = start_val;
              CUP$A_Sintactico1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_Sintactico1$parser.done_parsing();
          return CUP$A_Sintactico1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= B 
            {
              Object RESULT =null;
		int B1left = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()).right;
		Numeros B1 = (Numeros)((java_cup.runtime.Symbol) CUP$A_Sintactico1$stack.peek()).value;
		raiz=B1;
              CUP$A_Sintactico1$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // B ::= para numero coma numero parc BP 
            {
              Numeros RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico1$stack.peek()).value;
		String[] datos=c.split(",");
                                               int resultado=0;
                                               int resultado2=0;
                                               int suma=100000;
                                               int temporal=0;
                                               int posicion1=0;
                                               int posicion2=0;
                                            for(int i=0;i<datos.length;i=i+2){

                                            resultado=Integer.parseInt(a)-Integer.parseInt(datos[i]);
                                            resultado2=Integer.parseInt(b)-Integer.parseInt(datos[i+1]);
                                            resultado=Math.abs(resultado);
                                            resultado2=Math.abs(resultado2);
                                            temporal=resultado+resultado2;
                                            if(temporal<suma){
                                            suma=temporal;
                                            posicion1=i;
                                            posicion2=i+1;
                                            }
}
                                            Numeros num=new Numeros(Integer.parseInt(datos[posicion1]),Integer.parseInt(datos[posicion2]));
                                             
                                             RESULT=num;
              CUP$A_Sintactico1$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-5)), ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BP ::= coma para numero coma numero parc BP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-2)).value;
		int BP1left = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()).left;
		int BP1right = ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()).right;
		String BP1 = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico1$stack.peek()).value;
		String cadena=""; 
if(BP1!=null){
                                                    cadena=BP1+","+a+","+b;
}
else {
cadena=a+","+b;
}
                                                    RESULT=cadena;
                                                   
              CUP$A_Sintactico1$result = parser.getSymbolFactory().newSymbol("BP",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.elementAt(CUP$A_Sintactico1$top-6)), ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BP ::= 
            {
              String RESULT =null;

              CUP$A_Sintactico1$result = parser.getSymbolFactory().newSymbol("BP",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico1$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_Sintactico1$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico1$do_action(
    int                        CUP$A_Sintactico1$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico1$parser,
    java.util.Stack            CUP$A_Sintactico1$stack,
    int                        CUP$A_Sintactico1$top)
    throws java.lang.Exception
    {
              return CUP$A_Sintactico1$do_action_part00000000(
                               CUP$A_Sintactico1$act_num,
                               CUP$A_Sintactico1$parser,
                               CUP$A_Sintactico1$stack,
                               CUP$A_Sintactico1$top);
    }
}

}
